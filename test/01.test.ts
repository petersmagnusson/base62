#!/usr/bin/env -S deno run --allow-read

//  (c) 2023-2024, 384 (tm) Inc.

import { arrayBufferToBase62, base62ToArrayBuffer } from '../src/base62.ts';

const DEBUG = false

// Generate a random array buffer
function generateRandomArrayBuffer(length: number) {
    const buffer = new Uint8Array(length);
    for (let i = 0; i < length; i++)
        buffer[i] = Math.floor(Math.random() * 256);
    return buffer.buffer;
}

function generateRandomBufferSize() {
    // must be multiple of 32 bits
    return Math.floor(Math.random() * 32) * 4;
}

// Compare two array buffers for equality
function compareArrayBuffers(buffer1: ArrayBuffer, buffer2: ArrayBuffer) {
    if (buffer1.byteLength !== buffer2.byteLength) {
        return false;
    }
    const view1 = new DataView(buffer1);
    const view2 = new DataView(buffer2);
    for (let i = 0; i < buffer1.byteLength; i++) {
        if (view1.getUint8(i) !== view2.getUint8(i)) {
            return false;
        }
    }
    return true;
}

// Test the arrayBufferToBase62 function with random inputs
const GENERATE_TEST_CASES = false; // set to true to also output test cases to console
function testarrayBufferToBase62(numTests: number) {
    let testsPassed = 0;
    if (GENERATE_TEST_CASES) console.log("export const testCases = [");
    for (let i = 0; i < numTests; i++) {
        const n = generateRandomBufferSize();
        const buffer = generateRandomArrayBuffer(n);
        const base62String = arrayBufferToBase62(buffer);
        if (DEBUG) console.log("Test: array buffer becomes ('" + base62String + "')");
        if (GENERATE_TEST_CASES) console.log(`    { buffer: new Uint8Array([${new Uint8Array(buffer).toString()}]), base62: "${base62String}" },`);
        const newBuffer = base62ToArrayBuffer(base62String);
        if (compareArrayBuffers(buffer, newBuffer)) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, buffer, newBuffer);
        }
    }
    if (GENERATE_TEST_CASES) console.log("];");
    console.log(`// testarrayBufferToBase62: ${testsPassed} out of ${numTests} tests passed.`);
}

async function runTestCasesFromFile(fileName: string) {
    // test case files can be generated by running testarrayBufferToBase62 with GENERATE_TEST_CASES = true
    const testCases = await import(fileName);
    let testsPassed = 0;
    for (let i = 0; i < testCases.testCases.length; i++) {
        const testCase = testCases.testCases[i];
        const buffer = testCase.buffer;
        const base62String = testCase.base62;
        // first test conversion from string to buffer
        const newBuffer = base62ToArrayBuffer(base62String);
        if (compareArrayBuffers(buffer.buffer, newBuffer)) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, buffer, newBuffer);
        }
        // then test conversion from buffer to string
        const newBase62String = arrayBufferToBase62(buffer.buffer);
        if (base62String === newBase62String) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, base62String, newBase62String);
        }
    }
    console.log(`// runTestCasesFromFile: ${testsPassed} out of ${testCases.testCases.length * 2} tests passed.`);
}

function runTests(reps: number) {
    // deterministic:
    runTestCasesFromFile("./set.01.ts")
    runTestCasesFromFile("./set.02.ts")
    runTestCasesFromFile("./set.03.ts")
    runTestCasesFromFile("./set.04.ts")
    // random (each time):
    testarrayBufferToBase62(reps);
}

const REP = 20000;

Deno.test("basic SB384 tests", async () => {
    runTests(REP);
});
runTests(REP);
