#!/usr/bin/env -S deno run --allow-read

//  (c) 2023-2024, 384 (tm) Inc.

import { arrayBufferToBase62, base62ToArrayBuffer, base62 } from '../src/base62.ts';

const DEBUG = false

// Generate a random array buffer
function generateRandomArrayBuffer(length: number) {
    const buffer = new Uint8Array(length);
    for (let i = 0; i < length; i++)
        buffer[i] = Math.floor(Math.random() * 256);
    return buffer.buffer;
}

// Random buffer sizes 0..511
function generateRandomBufferSize(range: number = 512) {
    return Math.floor(Math.random() * range);
}

// Compare two array buffers for equality
function compareArrayBuffers(buffer1: ArrayBuffer, buffer2: ArrayBuffer) {
    if (buffer1.byteLength !== buffer2.byteLength)
        return false;
    const view1 = new DataView(buffer1);
    const view2 = new DataView(buffer2);
    for (let i = 0; i < buffer1.byteLength; i++) {
        if (view1.getUint8(i) !== view2.getUint8(i))
            return false;
    }
    return true;
}

// Test the arrayBufferToBase62 function with random inputs
const GENERATE_TEST_CASES = false; // set to true to also output test cases to console
function testarrayBufferToBase62(numTests: number, maxBufSize: number = 512) {
    let testsPassed = 0;
    if (GENERATE_TEST_CASES) console.log("export const testCases = [");
    for (let i = 0; i < numTests; i++) {
        const n = generateRandomBufferSize(maxBufSize);
        const buffer = generateRandomArrayBuffer(n);
        const base62String = arrayBufferToBase62(buffer);
        if (DEBUG) console.log("Test: array buffer becomes ('" + base62String + "')");
        if (GENERATE_TEST_CASES) console.log(`    { buffer: new Uint8Array([${new Uint8Array(buffer).toString()}]), base62: "${base62String}" },`);
        const newBuffer = base62ToArrayBuffer(base62String);
        if (compareArrayBuffers(buffer, newBuffer)) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            if (maxBufSize <= 512)
                console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, buffer, newBuffer);
            else
                console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Buffers differed.`);
        }
    }
    if (GENERATE_TEST_CASES) console.log("];");
    console.log(`// testarrayBufferToBase62: ${testsPassed} out of ${numTests} tests passed.`);
}

async function runTestCasesFromFile(fileName: string) {
    // test case files can be generated by running testarrayBufferToBase62 with GENERATE_TEST_CASES = true
    const testCases = await import(fileName);
    let testsPassed = 0;
    for (let i = 0; i < testCases.testCases.length; i++) {
        const testCase = testCases.testCases[i];
        const buffer = testCase.buffer;
        const base62String = testCase.base62;
        // first test conversion from string to buffer
        const newBuffer = base62ToArrayBuffer(base62String);
        if (compareArrayBuffers(buffer.buffer, newBuffer)) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, buffer, newBuffer);
        }
        // then test conversion from buffer to string
        const newBase62String = arrayBufferToBase62(buffer.buffer);
        if (base62String === newBase62String) {
            if (DEBUG) console.log(`Passing test ...`)
            testsPassed++;
        } else {
            console.warn(`testarrayBufferToBase62: Test ${i + 1} failed. Expected, but got`, base62String, newBase62String);
        }
    }
    console.log(`// runTestCasesFromFile: ${testsPassed} out of ${testCases.testCases.length * 2} tests passed.`);
}

async function runInvalidBase62StringTestCasesFromFile(fileName: string) {
    const testCases = await import(fileName);
    let testsPassed = 0;
    for (let i = 0; i < testCases.illegaseBase62strings.length; i++) {
        const testCase = testCases.illegaseBase62strings[i];
        try {
            const newBuffer = base62ToArrayBuffer(testCase);
            console.warn(`runInvalidBase62StringTestCasesFromFile: Test ${i + 1} failed. Expected error, but got`, newBuffer);
        } catch (e) {
            if (DEBUG) console.log(`Passing test ...`)
            if (e.message.indexOf("Invalid Base62 string") < 0) {
                console.error(`runInvalidBase62StringTestCasesFromFile: Test ${i + 1} failed. Expected error message 'Invalid Base62 string.', but got`, e.message)
                throw new Error("Invalid string test failed.")
            }
            testsPassed++;
        }
    }
    console.log(`// runInvalidBase62StringTestCasesFromFile: ${testsPassed} out of ${testCases.illegaseBase62strings.length} tests passed.`);
}

// Generate a random base62 string
function generateRandomBase62String(length: number) {
    let result = '';
    for (let i = 0; i < length; i++)
        result += base62[Math.floor(Math.random() * 62)];
    return result;
}

// used to generate test cases for invalid base62 strings
function findIllegalBase62String() {
    console.log("export const illegaseBase62strings = [")
    let i = 0, j = 0, k = 0;
    while (i++ < 100000, j < 20) { // sanity stop, plus at most j strings
        const s = generateRandomBase62String(generateRandomBufferSize());
        try {
            const buf = base62ToArrayBuffer(s);
            k += buf.byteLength;
        } catch (e) {
            // console.log(`Found illegal base62 string '${s}'`);
            // return;
            console.log(`    "${s}",`);
            j++;
        }
    }
    console.log("];")
    console.log(`// Found ${j} illegal base62 strings, total length ${k} bytes of buffer in valid strings.`)
    if (j == 0) console.log(`// Failed to find illegal base62 string, tried ${i} times.`);
}

function runTests(reps: number, bigReps: number = 10) {
    // random (each time):
    testarrayBufferToBase62(reps);

    // test large buffers
    testarrayBufferToBase62(bigReps, 256 * 1024);

    // deterministic:
    runTestCasesFromFile("./set.01.ts")
    runTestCasesFromFile("./set.02.ts")
    runTestCasesFromFile("./set.03.ts")
    runTestCasesFromFile("./set.04.ts")

    // these test cases should all throw "Invalid Base62 string."
    runInvalidBase62StringTestCasesFromFile("./error.set.01.ts")

    // some manual sanity checks
    console.log("=========")
    console.log("Sanity checks:");
    console.log(`'${arrayBufferToBase62(new Uint8Array([]).buffer)}'`);
    console.log(`'${arrayBufferToBase62(new Uint8Array([1]).buffer)}'`);
    console.log(`'${arrayBufferToBase62(new Uint8Array([1, 2]).buffer)}'`);
    console.log(`'${arrayBufferToBase62(new Uint8Array([1, 2, 3]).buffer)}'`);
    console.log(`'${arrayBufferToBase62(new Uint8Array([0, 0, 0, 0]).buffer)}'`);
    console.log("=========")

}

const REP = 20000;

Deno.test("base62 main test", async () => {
    runTests(REP);
});
runTests(REP);

